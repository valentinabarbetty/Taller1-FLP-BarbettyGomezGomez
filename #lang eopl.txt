#lang eopl
;;  Taller 1
;; Valentina Barbetty Arango 2310050
;; Brayan Julio Gómez 2310016
;; Jheison Gómez 


;; PUNTO 1
;; invert :
;; Proposito:
;; L -> L' : Procedimiento que recibe una lista con pares x,y e invierte esos pares de forma que queden y,x
;;
;; <lista> := ()
;;         := (<lista>)

(define invert
  (lambda (L)
    (if (null? L)
        '()
        (cons (list (cadr (car L)) (car (car L)))
        (invert (cdr L)))))) 

;; Pruebas
(invert '((a 1) (a 2) (1 b) (2 b)))
(invert '((5 9) (10 91) (82 7) (a e) ("hola" "Mundo")))
(invert '(("es" "racket") ("genial" "muy") (17 29) (81 o)))



#lang eopl
;;  Taller 1
;; Valentina Barbetty Arango 2310050
;; Brayan Julio Gómez 2310016
;; Jheison Gómez 


;; PUNTO 1
;; invert :
;; Proposito:
;; L -> L' : Procedimiento que recibe una lista con pares x,y e invierte esos pares de forma que queden y,x
;;
;; <lista> := ()
;;         := (<lista>)

(define invert
  (lambda (L)
    (if (null? L)
        '()
        (cons (list (cadr (car L)) (car (car L)))
        (invert (cdr L)))))) 

;; Pruebas
(invert '((a 1) (a 2) (1 b) (2 b)))
(invert '((5 9) (10 91) (82 7) (a e) ("hola" "Mundo")))
(invert '(("es" "racket") ("genial" "muy") (17 29) (81 o)))


;; PUNTO 2

;; down :
;; Proposito:
;; L -> L' : Procedimiento que recibe una lista y a cada elemento de esa lista le añade un nivel más de paréntesis
;;
;; <lista> := ()
;;         := (<lista>)

(define down
  (lambda (L)
    (if (null? L)
        '()
        (cons (list (car L))
        (down (cdr L)))))) 

;; Pruebas
(down '(1 2 3))
(down '((una) (buena) (idea)))
(down '(un (objeto (mas)) complicado))


;; PUNTO 2

(define filter-in
  (lambda (P? L)
    (cond
      [null? '()]
      [(P? 2) #f])))


#lang eopl
;;  Taller 1
;; Valentina Barbetty Arango 2310050
;; Brayan Julio Gómez 2310016
;; Jheison Gómez 


;; PUNTO 1
;; invert :
;; Proposito:
;; L -> L' : Procedimiento que recibe una lista con pares x,y e invierte esos pares de forma que queden y,x
;;
;; <lista> := ()
;;         := (<lista>)

(define invert
  (lambda (L)
    (if (null? L)
        '()
        (cons (list (cadr (car L)) (car (car L)))
        (invert (cdr L)))))) 

;; Pruebas
(invert '((a 1) (a 2) (1 b) (2 b)))
(invert '((5 9) (10 91) (82 7) (a e) ("hola" "Mundo")))
(invert '(("es" "racket") ("genial" "muy") (17 29) (81 o)))


;; PUNTO 2

;; down :
;; Proposito:
;; L -> L' : Procedimiento que recibe una lista y a cada elemento de esa lista le añade un nivel más de paréntesis
;;
;; <lista> := ()
;;         := (<lista>)

(define down
  (lambda (L)
    (if (null? L)
        '()
        (cons (list (car L))
        (down (cdr L)))))) 

;; Pruebas
(down '(1 2 3))
(down '((una) (buena) (idea)))
(down '(un (objeto (mas)) complicado))


;; PUNTO 4

;; filter-in :
;; Proposito:
;; P x L -> L' : Procedimiento que recibe una lista y un predicado,
;; a cada elemento de esa lista va a verificar si cumple el predicado
;; si lo cumple, lo añade a una lista
;;
;; <lista> := ()
;;         := (<predicado> <lista>)

(define filter-in
  (lambda (P L)
    (if (null? L)
        '()
        (if (P (car L))
            (cons (car L) (filter-in P (cdr L)))
            (filter-in P (cdr L))))))

;; pruebas
(filter-in number? '(a 2 (1 3) b 7))
(filter-in symbol? '(a (b c) 17 foo))
(filter-in string? '(a b u "univalle" "racket" "flp" 28 90 (1 2 3)))


#lang eopl
;;  Taller 1
;; Valentina Barbetty Arango 2310050
;; Brayan Julio Gómez 2310016
;; Jheison Gómez 


;; PUNTO 1
;; invert :
;; Proposito:
;; L -> L' : Procedimiento que recibe una lista con pares x,y e invierte esos pares de forma que queden y,x
;;
;; <lista> := ()
;;         := (<lista>)

(define invert
  (lambda (L)
    (if (null? L)
        '()
        (cons (list (cadr (car L)) (car (car L)))
        (invert (cdr L)))))) 

;; Pruebas
(invert '((a 1) (a 2) (1 b) (2 b)))
(invert '((5 9) (10 91) (82 7) (a e) ("hola" "Mundo")))
(invert '(("es" "racket") ("genial" "muy") (17 29) (81 o)))


;; PUNTO 2

;; down :
;; Proposito:
;; L -> L' : Procedimiento que recibe una lista y a cada elemento de esa lista le añade un nivel más de paréntesis
;;
;; <lista> := ()
;;         := (<lista>)

(define down
  (lambda (L)
    (if (null? L)
        '()
        (cons (list (car L))
        (down (cdr L)))))) 

;; Pruebas
(down '(1 2 3))
(down '((una) (buena) (idea)))
(down '(un (objeto (mas)) complicado))


;; PUNTO 4

;; filter-in :
;; Proposito:
;; P x L -> L' : Procedimiento que recibe una lista y un predicado,
;; a cada elemento de esa lista va a verificar si cumple el predicado
;; si lo cumple, lo añade a una lista
;;
;; <lista> := ()
;;         := (<predicado> <lista>)

(define filter-in
  (lambda (P L)
    (if (null? L)
        '()
        (if (P (car L))
            (cons (car L) (filter-in P (cdr L)))
            (filter-in P (cdr L))))))

;; pruebas
(filter-in number? '(a 2 (1 3) b 7))
(filter-in symbol? '(a (b c) 17 foo))
(filter-in string? '(a b u "univalle" "racket" "flp" 28 90 (1 2 3)))


;; Punto 7
;; cartesian-product :
;; Proposito:
;; L1 x L2 -> L' : Procedimiento que recibe dos listas y
;; realiza el producto cartesiano entre ellas
;;
;; <lista> := ()
;;         := (<lista> <lista>)


(define cartesian-product
  (lambda (L1 L2)
    (cond [(null? L1) '()]
          [(null? L2) '()]
          [else (append (cart-prod-helper (car L1) L2) (cartesian-product (cdr L1) L2))]
          )
    )
  )

(define cart-prod-helper
  (lambda (x L)
    (cond [(null? L) '()]
          [else (cons (list x (car L)) (cart-prod-helper x (cdr L)))]
          )
    )
  )


;; pruebas
(cartesian-product '(a b c) '(x y))
(cartesian-product '(p q r) '(5 6 7))

(define multi
  (lambda (L x)
    (cond [(null? L) '()]
          [else (cons (* (car L) x)
                (multi (cdr L) x))]
          )
    )
  )

(define prod-scalar-matriz
  (lambda (vec mat)
    (if (null? mat)
        '()
        (list (list (multi (car mat) (car vec) )
              (prod-scalar-matriz  (cdr mat) (car vec)))))))

;;(define prod-scalar-matriz
  ;;(lambda (mat vec)
    ;;(if (null? mat)
      ;;  '()
        ;;(list (list ( * (car (car mat)) (car vec)) ( * (cadr (car mat)) (cadr vec)))
          ;;    (prod-scalar-matriz (cadr (cadr mat)) vec))
            ;;  )))


(define prod
  (lambda (mat vec)
    (if (null? mat)
        '()
        (list (list (* (car (car mat)) (car vec)  )
              (prod  (cdr (cdr mat)) (cdr vec)
              ))))))


(define recorre
  (lambda (L x)
    (if(null? L)
       '()
       (list (list (car L) x) (recorre (cdr L) x))
       )))
(define escalar
  (lambda (mat vec)
    (cond [(null? vec) '()]
          [(null? mat) '()]
          [else (list (recorre (car mat) (car vec))
                      (escalar (cdr mat) (cdr vec)))])))
